@using Blazored.LocalStorage
@inherits LayoutComponentBase
@inject LocalizationService Localization
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime;

<MudThemeProvider IsDarkMode="_darkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

@if (_loaded)
{
    <MudLayout>
        <MudAppBar Elevation="2">
            @*<MudButton Color="Color.Inherit" Href="/">
                @Localization.Get("Curriculum")
            </MudButton>*@
            @*<MudButton Color="Color.Inherit" Href="/Resume">
                @Localization.Get("Resume")
            </MudButton>
            <MudButton Color="Color.Inherit" Href="/Blog">
                @Localization.Get("Blog")
            </MudButton>
            <MudButton Color="Color.Inherit" Href="/Contacts">
                @Localization.Get("Contacts")
            </MudButton>*@

            <MudSpacer/>

            <MudIconButton Class="pa-0 mt-2" OnClick='async () => await Localization.ChangeLanguage("portugues")'>
                <CountryFlag Country="Country.BR" Size="FlagSize.Normal"/>
            </MudIconButton>

            <MudIconButton Class="pa-0 mt-2" OnClick="async () => await Localization.ChangeLanguage()">
                <CountryFlag Country="Country.US" Size="FlagSize.Normal"/>
            </MudIconButton>
            <MudDivider Vertical="true" FlexItem="true" Class="my-2"/>
            <MudIconButton Icon="@(_darkMode ? Icons.Filled.LightMode : Icons.Filled.DarkMode)" OnClick="ToggleMode" Color="Color.Inherit"/>
            <MudIconButton Icon="@Icons.Filled.Print" Color="Color.Inherit" OnClick="Print"/>
        </MudAppBar>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="d-flex">
                <MudPaper Elevation="6" Class="mx-auto my-4" Style="width: 100vw">
                    <div class="printable">
                        @Body
                    </div>
                </MudPaper>
            </MudContainer>
        </MudMainContent>
    </MudLayout>
}
else
{
    <Loading/>
}

@code {
    bool _darkMode = true;
    bool _loaded;

    async Task ToggleMode()
    {
        _darkMode = !_darkMode;
        await LocalStorage.SetItemAsync("darkMode", _darkMode);
    }

    async Task Print()
    {
        try
        {
            await JsRuntime.InvokeAsync<object>("open", $"https://cv.mariogk.top/pdfs/{Localization.SelectedLanguageData.Language.ToLower()}.pdf", "_blank");
        }
        catch (Exception)
        {
    //Ignore errors if any
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Localization.LanguageChanged += async () =>
        {
            await LocalStorage.SetItemAsync("language", Localization.SelectedLanguageData.Language);
            await InvokeAsync(StateHasChanged);
            _loaded = true;
        };

        if (await LocalStorage.ContainKeyAsync("darkMode"))
        {
            _darkMode = await LocalStorage.GetItemAsync<bool>("darkMode");
        }

        if (await LocalStorage.ContainKeyAsync("language"))
        {
            var language = await LocalStorage.GetItemAsync<string>("language");
            if (string.IsNullOrEmpty(language))
            {
                await Localization.ChangeLanguage();
            }
            else
            {
                await Localization.ChangeLanguage(language);
            }
        }
        else
        {
            await Localization.ChangeLanguage();
        }

        _loaded = true;
    }

}