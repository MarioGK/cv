Language: English
DateFormat: MM/dd/yyyy
Translations:
  Contacts: Contacts
  Curriculum: Curriculum
  Resume: Resume
  Blog: Blog
  Introduction: Introduction
  Skills: Skills
  Experience: Experience
  Experiences: Experiences
  Languages: Languages
  PersonalInfo: Personal Information
  Name: Name
  LastName: Last Name
  DateOfBirth: Date of Birth
  CountryOfBirth: Country of Birth
Introduction: |
  My name is Mario Gabriell Karaziaki Belchior, i am a full stack developer with over 6 years of experience in the field.
  I have worked with several technologies and i am always looking for new challenges and learning new things.
  I love to learn new things related to computers, software development and electronics.
Experiences:
  - Company: Tech9
    Position: DevOps Engineer
    StartDate: '2022-03-08T05:12:13.853+00:00'
    EndDate: '2022-07-11T05:12:13.853+00:00'
    Description: |
      I integrated Redis as a caching system for their scrapping service and RabbitMQ using Celery as the api for queuing up tasks.
      Reconstructed and remodeled their whole infrastructure to AWS.
      Used Pulumi to create the infrastructure as code and Github Actions to auto deploy their app to production.
  - Company: Hospital Ophir Loyola
    Position: Software Engineer
    StartDate: '2021-01-13T05:12:13.853+00:00'
    EndDate: '2022-02-24T05:12:13.853+00:00'
    Description: |
      I created tasks, distributed to the team according to their skills, and made multiple contributions to the
      backend.
      The project was a full stack application using C#, ASP.NET, a C# UI framework called Blazor and a C#
      framework for SQL called EF Core, a fully featured management system of documents, appointments,
      medical equipments/materials, calendar system and report statistical reports.
      One of my key contributions to the project was a modular component called AutoForm which built
      forms and forms within modal dialogs passing only the Type, it would automatically fetch the data from
      the SQL database, and save it automatically as well, this was a huge time saver.
      GIT was used to facilitate the collaboration between the team members.
      The project is used daily by thousands of employees without any issues.
  - Company: Loja DasGringas
    Position: Software Engineer
    StartDate: '2020-08-18T05:12:13.853+00:00'
    EndDate: '2020-12-28T05:12:13.853+00:00'
    Description: |
      The project was a an easy to use stock management and point of sales system made using WPF as its UI framework.
      Which included features such as printing labels, printing receipts, warnings like low stock of a certain
      item and an easy to use Interface.
      ASP.NET core was used for the backend.
      I used Gitlab CI to auto deploy new changes made in the master branch.
  - Company: MayconCT
    Position: Software Engineer
    StartDate: '2020-03-15T05:12:13.853+00:00'
    EndDate: '2020-07-26T05:12:13.853+00:00'
    Description: |
      Flutter was used as the UI framework for the project.
      The project was published on the play store, the app store and as an web app.
      ASP.NET core was used to make the backend and API.
      GIT was used to trigger a Gitlab CI job and handle all the functional tests and automatic deployment to the stores and website.
  - Company: Hilariante
    Position: Software Engineer
    StartDate: '2016-04-10T05:12:13.853+00:00'
    EndDate: '2020-02-28T05:12:13.853+00:00'
    Description: |
      The project was designed to read information from memory of a legacy 3rd party software, and make a
      scripting API so logics and interfaces could be written in C#.
      The team used many technologies to accomplish this, C++ was used to read the memory and host a
      .NET environment, C++/CLI was used to make the C# library as a "glue" to marshal C++ data to C#, 
      we used AppDomains in C# to make a sandboxed environment which scripts and programs could run isolated and safely.
      My contributions to the project were:
        Observed progress of each project and analyzed the code.
        Defined responsibilities, duties, and roles of each team member.
      
      The outcome was a heavily optimized API, which was pretty easy to use and create more features
      using a legacy software that would have to be rewritten from scratch to accomplish the same thing, we
      saved a lot of developer's time.
