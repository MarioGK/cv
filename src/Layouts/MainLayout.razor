@using Blazored.LocalStorage
@inherits LayoutComponentBase
@inject IJSRuntime Js
@inject LocalizationService LocalizationService
@inject ILocalStorageService LocalStorageService

<MudThemeProvider IsDarkMode="_darkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

@if (_loaded)
{
    <MudLayout>
        <MudAppBar Elevation="2">
            <MudButton Color="Color.Inherit" Href="/">
                @LocalizationService.Get("curriculum")
            </MudButton>
            <MudButton Color="Color.Inherit" Href="/Resume">
                @LocalizationService.Get("resume")
            </MudButton>
            <MudButton Color="Color.Inherit" Href="/Blog">
                @LocalizationService.Get("blog")
            </MudButton>
            <MudButton Color="Color.Inherit" Href="/Contacts">
                @LocalizationService.Get("contacts")
            </MudButton>
        
            <MudSpacer />
        
            <MudIconButton Class="pa-0 mt-2" OnClick='async () => await LocalizationService.ChangeLanguage("portugues")'>
                <CountryFlag Country="Country.BR" Size="FlagSize.Normal"/>
            </MudIconButton>
        
            <MudIconButton Class="pa-0 mt-2"  OnClick="async () => await LocalizationService.ChangeLanguage()">
                <CountryFlag Country="Country.US" Size="FlagSize.Normal"/>
            </MudIconButton>
            <MudDivider Vertical="true" FlexItem="true" Class="my-2"/>
            <MudIconButton Icon="@(_darkMode ? Icons.Filled.LightMode : Icons.Filled.DarkMode)" OnClick="ToggleMode" Color="Color.Inherit" />
            <MudIconButton Icon="@Icons.Filled.Print" Color="Color.Inherit" OnClick="Print" />
        </MudAppBar>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="d-flex">
                <MudPaper Elevation="6" Class="mx-auto my-4" Style="width: 100vw">
                    <div class="printable">
                        @Body
                    </div>
                </MudPaper>
            </MudContainer>
        </MudMainContent>
    </MudLayout>
}
else
{
    <Loading/>
}

@code {
    bool _darkMode = true;
    bool _loaded = false;

    async Task ToggleMode()
    {
        _darkMode = !_darkMode;
        await LocalStorageService.SetItemAsync("darkMode", _darkMode);
    }
    
    async Task Print()
    {
        await Js.InvokeVoidAsync("invokeWindowPrint");
    }

    protected override async Task OnInitializedAsync()
    {
        LocalizationService.LanguageChanged += async () =>
        {
            await LocalStorageService.SetItemAsync("language", LocalizationService.SelectedLanguageData.Language);
            await InvokeAsync(StateHasChanged);
            _loaded = true;
        };
        
        if(await LocalStorageService.ContainKeyAsync("darkMode"))
        {
            _darkMode = await LocalStorageService.GetItemAsync<bool>("darkMode");
        }
        
        if(await LocalStorageService.ContainKeyAsync("language"))
        {
            await LocalizationService.ChangeLanguage(await LocalStorageService.GetItemAsync<string>("language"));
        }
        else
        {
            await LocalizationService.ChangeLanguage();
        }
        
        _loaded = true;
    }
}